// Copyright 1997 Association for Universities for Research in Astronomy, Inc.,
// Observatory Control System, Gemini Telescopes Project.
// See the file COPYRIGHT for complete details.
//
// $Id$
//
package ot.ukirt.iter.editor;

import java.util.*;

import orac.ukirt.inst.SpInstCGS4;
import orac.ukirt.iter.SpIterCGS4CalObs;
import orac.ukirt.iter.SpCGS4CalUnitConstants;
//import ot_ukirt.util.*;

import gemini.sp.SpItem;
import gemini.sp.SpTreeMan;
import gemini.sp.obsComp.SpInstObsComp;

import gemini.gui.CheckBoxWidgetExt;
import gemini.gui.CheckBoxWidgetWatcher;
import gemini.gui.DropDownListBoxWidgetExt;
import gemini.gui.DropDownListBoxWidgetWatcher;
import gemini.gui.CommandButtonWidgetExt;
import gemini.gui.CommandButtonWidgetWatcher;
import gemini.gui.TextBoxWidgetExt;
import gemini.gui.TextBoxWidgetWatcher;

import java.awt.Event;

import org.freebongo.gui.SpinBoxWidget;
import org.freebongo.gui.GroupWidget;
import org.freebongo.gui.StaticTextWidget;
import org.freebongo.gui.Widget;

import ot.editor.OtItemEditor;

/**
 * This is the editor for the CGS4 CalUnit Observation iterator.
 */
public final class EdIterCGS4CalObs extends OtItemEditor
                     implements TextBoxWidgetWatcher, DropDownListBoxWidgetWatcher
{

   private SpItem   _baseItem;

   /** Identifier for a FLAT calibration. */
   public static final int FLAT = 0;

   /** Identifier for an ARC calibration. */
   public static final int ARC  = 1;

   private SpIterCGS4CalObs _calCGS4;

/**
 * The constructor initializes the title, description, and presentation source.
 */
public EdIterCGS4CalObs()
{
   _title       ="CGS4 Cal Unit Observation";
   _presSource  ="~gemini/cfg/gui/iterCGS4CalObs.gui";
   _description ="Configure CGS4's Calibration Unit with this component.";
}

/**
 */
protected void
_init()
{
   DropDownListBoxWidgetExt ddlbw;
   CommandButtonWidgetExt cbw;

   SpIterCGS4CalObs ico = (SpIterCGS4CalObs) _spItem;

   // Set the calibration choices
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("calType");
   ddlbw.setChoices( SpCGS4CalUnitConstants.CALTYPES );

   // Set the lamp choices
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("lamp");
   ddlbw.setChoices( SpIterCGS4CalObs.ARC_LAMPS );

   // Show the filter
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("filter");
   ddlbw.setChoices( SpIterCGS4CalObs.FILTERS );

   // Show the mode
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("mode");
   ddlbw.setChoices( SpIterCGS4CalObs.MODES );

   TextBoxWidgetExt tbwe;

   // Exposure time
   tbwe = (TextBoxWidgetExt) _pres.getWidget("exposureTime");
   tbwe.addWatcher( this );

   // Coadds
   tbwe = (TextBoxWidgetExt) _pres.getWidget("coadds");
   tbwe.addWatcher( this );

   // CVF Wavelength
   tbwe = (TextBoxWidgetExt) _pres.getWidget("cvfWavelength");
   tbwe.addWatcher( this );

   // Flat sampling
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("flatSampling");
   ddlbw.setChoices ("1x1");
   //   tbwe.addWatcher( this );

   // default values button
   cbw = (CommandButtonWidgetExt) _pres.getWidget("defaultValues");

   super._init();

}

/**
 * Implements the _updateWidgets method from OtItemEditor in order to
 * setup the widgets to show the current values of the item.
 */
protected void
_updateWidgets()
{
   DropDownListBoxWidgetExt ddlbw;
   StaticTextWidget stw;

   SpIterCGS4CalObs ico = (SpIterCGS4CalObs) _spItem;

   // Get the choices and defaults from the instrument.

   // Show the calib. type
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("calType");
   ddlbw.setValue( ico.getCalTypeString() );

   // Show the lamp
   _updateLampChoices();
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("lamp");
   String lamp = ico.getLamp();
   ddlbw.setValue( lamp );
   ico.setLamp(lamp);

   // Show the filter
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("filter");
   // For flats, inherit from instrument, for arcs choose.
//   if (ico.getCalType() == FLAT) {
   String filter = ico.getFilter();
   ddlbw.setValue( filter );
   ico.setFilter (filter);

   // Show the mode
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("mode");
   String mode = ico.getMode();
   ddlbw.setValue( mode);
   ico.setMode (mode);

   // Observe repetitions
   SpinBoxWidget sbw = (SpinBoxWidget) _pres.getWidget("repeatSpinBox");
   sbw.setValue( ico.getCount() );

   TextBoxWidgetExt tbwe;

   // Exposure time
   tbwe = (TextBoxWidgetExt) _pres.getWidget("exposureTime");
   tbwe.setValue( ico.getExposureTime() );

   // Coadds
   tbwe = (TextBoxWidgetExt) _pres.getWidget("coadds");
   tbwe.setValue( ico.getCoadds() );

   // Cvf wavelength
   tbwe = (TextBoxWidgetExt) _pres.getWidget("cvfWavelength");
   tbwe.setValue( ico.getCvfWavelength() );
   // Deal with CVF wavelength according to state of inst & caltype
   SpItem _baseItem = ico;
   SpItem _parent = _baseItem.parent();
   SpInstCGS4 _instCgs4 = (SpInstCGS4) SpTreeMan.findInstrument(_baseItem);
   String grat = _instCgs4.getDisperser();
   if (grat.equalsIgnoreCase("echelle") && (ico.getCalType() == ARC)) {
     //     tbwe = (TextBoxWidgetExt) _pres.getWidget("cvfWavelength");
     tbwe.setVisible(true);
     stw = (StaticTextWidget) _pres.getWidget("cvfWaveLabel");
     stw.setVisible(true);
     stw = (StaticTextWidget) _pres.getWidget("cvfWaveUnit");
     stw.setVisible(true);
   }else{
     //     tbwe = (TextBoxWidgetExt) _pres.getWidget("cvfWavelength");
     tbwe.setVisible(false);
     stw = (StaticTextWidget) _pres.getWidget("cvfWaveLabel");
     stw.setVisible(false);
     stw = (StaticTextWidget) _pres.getWidget("cvfWaveUnit");
     stw.setVisible(false);
   }
   // Deal with Flat Sampling according to state of inst & caltype
   String samp = _instCgs4.getSampling();
   ddlbw = (DropDownListBoxWidgetExt) _pres.getWidget("flatSampling");
   ddlbw.setValue( ico.getFlatSampling() );
   if (ico.getCalType() == FLAT) {
     ddlbw.setVisible(true);
     stw = (StaticTextWidget) _pres.getWidget("flatSamplingLabel");
     stw.setVisible(true);
     ddlbw.setChoices( ico.getFlatSamplingChoices());
   }else{
     //     tbw = (TextBoxWidgetExt) _pres.getWidget("flatSampling");
     ddlbw.setVisible(false);
     stw = (StaticTextWidget) _pres.getWidget("flatSamplingLabel");
     stw.setVisible(false);
   }

}

//
// Update the lamp choices based upon the calibration type choice
//
private void
_updateLampChoices()
{
   // do I need this? Does it work?
   SpIterCGS4CalObs ico = (SpIterCGS4CalObs) _spItem;

   DropDownListBoxWidgetExt ddlbwl = (DropDownListBoxWidgetExt) _pres.getWidget("lamp");

   // get value of calType, set lamp choices accordingly
   if (ico.getCalType() == FLAT) {
      ddlbwl.setChoices ( SpIterCGS4CalObs.FLAT_LAMPS );

   }else{
      ddlbwl.setChoices ( SpIterCGS4CalObs.ARC_LAMPS );
   }
//   _updateWidgets();
}


/**
 * Watch changes to text box widgets.
 */
public void
textBoxKeyPress(TextBoxWidgetExt tbwe)
{
   SpIterCGS4CalObs ico = (SpIterCGS4CalObs) _spItem;
   
   if (tbwe.getName().equals("exposureTime")) {
      ico.setExposureTime( tbwe.getText() );
   } else if (tbwe.getName().equals("coadds")) {
      ico.setCoadds( tbwe.getText() );
   } else if (tbwe.getName().equals("cvfWavelength")) {
      ico.setCvfWavelength( tbwe.getText() );
   }
}
 
/**
 * Text box action.
 */
public void
textBoxAction(TextBoxWidgetExt tbwe) {}

/**
 * DD list box select.
 */
public void
dropDownListBoxSelect(DropDownListBoxWidgetExt ddlbwe, int i, String val) {}


/**
 * DD list box action.
 */
public void
dropDownListBoxAction(DropDownListBoxWidgetExt ddlbwe, int i, String val) {}


/**
 *
 */
public boolean 
action(Event evt, Object arg)
{

   if ((evt.id != Event.ACTION_EVENT) || !(evt.target instanceof Widget)) {
      return false;
   }

   Widget w    = (Widget) evt.target;
   String name = w.getName();

   SpIterCGS4CalObs ico = (SpIterCGS4CalObs) _spItem;

   if ("calType".equals(name)) {
      DropDownListBoxWidgetExt ddlbw = (DropDownListBoxWidgetExt) w;
      ico.setCalType(ddlbw.getStringValue());
      ico.useDefaults();
      _updateWidgets();
      return true;
   }

   if ("lamp".equals(name)) {
      DropDownListBoxWidgetExt ddlbw = (DropDownListBoxWidgetExt) w;
      ico.setLamp(ddlbw.getStringValue());
      return true;
   }

   if ("filter".equals(name)) {
      DropDownListBoxWidgetExt ddlbw = (DropDownListBoxWidgetExt) w;
      ico.setFilter(ddlbw.getStringValue());
      return true;
   }

   if ("mode".equals(name)) {
      DropDownListBoxWidgetExt ddlbw = (DropDownListBoxWidgetExt) w;
      ico.setMode(ddlbw.getStringValue());
      return true;
   }

   if ("flatSampling".equals(name)) {
      DropDownListBoxWidgetExt ddlbw = (DropDownListBoxWidgetExt) w;
      ico.setFlatSampling(ddlbw.getStringValue());
      return true;
   }

   if ("repeatSpinBox".equals(name)) {
      SpinBoxWidget sbw = (SpinBoxWidget) w;
      int i = sbw.getIntegerValue();
      ico.setCount(i);
      return true;
   }

   if ("defaultValues".equals(name)) {
      ico.useDefaults();
      _updateWidgets();
      return true;
   }

   return false;
}

}
