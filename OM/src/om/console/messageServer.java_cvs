package console;

import sciProgram.AlertBox;
import frameList.*;
import java.util.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.border.*;

import java.rmi.server.*;
import java.rmi.*;

/** messageServer class is about
    providing service to process message from a socket.
    Please note this extends UnicastRemoteObject and
    implements messageServerInterface
    REMEMBER:this class has to be compiled by a rmic

    @version 1.0 1st June 1999
    @author M.Tan@roe.ac.uk
*/
final public class messageServer extends UnicastRemoteObject implements messageServerInterface
{

/** public messageServer(String instrument) is
    the class constructor. The class has only one constructor so far.

    @param String
    @return  none
    @throws RemoteException
*/
  public messageServer(String instrument, FrameList frs) throws RemoteException
  {
    instName=instrument;
    consoleList=frs;
  }

  /**public void initSequence() is  a public method to
    initialise the sequence. when the socket is *first*
    connected by drama socket task

    @param none
    @return  none
    @throws RemoteException
 */
  public void initSequence() throws RemoteException
  {
    cSent.setInit();
    cSent.setLink("SOCK_"+instName);
  }


  /** public void processMessage(String m) is a public method to
    process incoming messages from the socket.

    @param String m
    @return  none
    @throws RemoteException
 */
  public void processMessage(String m) throws RemoteException
  {

    //    System.out.println ("Got message "+m);
    try {
      if(m.length()>=10)
	if(m.substring(0,10).equals("EXECLIST::"))
	  {
	    execlistMessage(m.substring(10)); //the exec sequence list
	    return;
	  }
      
      if(m.length()>=14)
	if(m.substring(0,14).equals("msg: PARA:DHS@"))
	  {
	    dhsMessage(m.substring(10));  //the status of the dhs
	    return;
	  }
      
      
      if(m.length()>=15)
	if(m.substring(0,15).equals("msg: PARA:INST@"))
	  {
	    instMessage(m.substring(10));  //the status of the instrument
	    return;
	  }
      
      if(m.length()>=17)
	if(m.substring(0,17).equals("msg: PARA:State::"))
	  {
	    stateMessage(m.substring(17)); //the state of the OOS task
	    return;
	  }
      
      //     if(m.length()>15)
      //     if(m.substring(0,15).equals("msg: ObsTitle::"))
      //     {
      //       System.out.println ("Issuing setObsTitle "+m.substring(15));
      //       seqPanel.setObsTitle(m.substring(15));
      //       return;
      //     }
      
      if(m.length()>=20)
	if(m.substring(0,20).equals("msg: PARA:CmdIndex::"))
	  {
	    indexMessage(m.substring(20));  //the index of the sequence
	    return;
	  }
            
      if(m.length()>=27)
	if(m.substring(0,27).equals("msg: entered uftiStartMovie"))
	  {
	    movieMessage(m); //the movie messsage
	    return;
	  }
      
      if(m.length()>=20+instName.length())
	if(m.substring(0,20+instName.length()).equals("0: obeyw "+instName+" START_MOVI"))
	  {
	    movieMessage(m);
	    return;
	  }
      
      if(m.length()>=21+instName.length()) {
	if(m.substring(0,21+instName.length()).equals("0: obeyw MONITOR_"+instName+" LIN")) {
	  if(mLink==2) {
	    cSent.setLink("OOS_"+instName);
	    mLink--;
	  } else if(mLink==3) {
	    // When linking to the instrument task need to get the name of
	    // the instrument task from system properties. Default to task name
	    // same as instrument name. (AB 24Apr00)
	    String taskName = System.getProperty (instName, instName);
	    cSent.setLink(taskName);
	    mLink--;
	  } else if(mLink==1) {
	    cSent.setLink("DHSPOOL_"+instName);
	    mLink--;
	  } else {
	    cSent.setStart();
	  }
	  return;
	}
      }

      if(m.length()>=22+instName.length()) {
	if(m.substring(0,22+instName.length()).equals("0: obeyw MONITOR_"+instName+" GETP")) {
	  cSent.setMonitorOn();
	  return;
	}
      }
    
      if(m.length()>=21+instName.length()) {
	if(m.substring(0,21+instName.length()).equals("0: obeyw OOS_"+instName+" breakPo")) {
	  breakPointMessage();
	  return;
	}
      }

      if(m.length()>=21+instName.length()) {
	if(m.substring(0,21+instName.length()).equals("0: obeyw OOS_"+instName+" cancelS")) {
	  cancelBreakPoint();
	  return;
	}
      }
      
      if(m.length()>=18+instName.length()) {
	if(m.substring(0,18+instName.length()).equals("0: obeyw OOS_"+instName+" load")) {
	    items.Init();
	    return;
	  }
      }

      if(m.length()>=18+instName.length()) {
	if(m.substring(0,18+instName.length()).equals("0: obeyw OOS_"+instName+" init")) {
	  // if this inst is the one connected to the tcs then
	  // ensure it really is!. Setting to none will do this.
	  if (consoleList.getConnectedInstrument().equals(instName)) {
	    consoleList.setConnectedInstrument("NONE");
	  }
	  return;
	}
      }

      if(m.length()>=18+instName.length()) {
	if(m.substring(0,18+instName.length()).equals("0: obeyw OOS_"+instName+" stop")) {
	    return;
	  }
      }

      if(m.length()>=18+instName.length()) {
	if(m.substring(0,18+instName.length()).equals("0: obeyw OOS_"+instName+" exit")) {
	  return;
	}
      }

      if(m.length()>=24) {
	if(m.substring(0,25).equals("msg: the monitor is ready")) {
	  Properties temp =System.getProperties();
	  
	  if(System.getProperty("DBUG_MESS").equals("ON"))
	    System.out.println(temp.getProperty("execFilename"));
	    
	  if(temp.containsKey("execFilename"))
	    cSent.setLoad(temp.getProperty("execFilename"));
	    
	  return;
	}
      }

      if(m.length()>=20+instName.length()) {
	if(m.substring(0,20+instName.length()).equals("0: obeyw OOS_"+instName+" target")) {
	  if(consoleList.getConnectedInstrument().equals("NONE")) {
	    uPanel.getTCSconnection().setText("Connected!!");
	    consoleList.setConnectedInstrument(instName);
	  }
	  return;
	}
      }

      if(m.length()>=20+instName.length()) {
	int l = consoleList.getConnectedInstrument().length();
	if(m.substring(0,20+l).equals("0: obeyw OOS_"+consoleList.getConnectedInstrument()+" target")) {
	  sequenceFrame temp;
	  for(int i=0;i<consoleList.getList().size();i++) {
	    temp = (sequenceFrame)consoleList.getList().elementAt(i);
	    if(temp.getInstrument().equals(consoleList.getConnectedInstrument())) {
	      temp.getUpperPanel().getTCSconnection().setText("disconnected");
	      break;
	    }
	  }
	    
	  consoleList.setConnectedInstrument("NONE");

	  return;
	}
      }
      
      if(m.length()>=20+instName.length()) {
	if(m.substring(0,20+instName.length()).equals("2: obeyw OOS_"+instName+" target")) {
	  new AlertBox("Failed in a TCS connection attempt");
	  return;
	}
      }
      if(m.length()>=4) {
	if(m.substring(0,4).equals("err:")) {
	  //show error messages from drama tasks
	  ErrorBox err=new ErrorBox("Error in the Drama tasks:"+m.substring(5));
	  return;
	}
      }
    } catch (StringIndexOutOfBoundsException e) {
      System.out.println ("messageServer: Caught exception: string was "+m);
    }
  }
    
  /** public void movieMessage(String s) is a public method to
    process messages about the movie status.

    @param String m
    @return  none
    @throws RemoteException
 */
  public void movieMessage(String s) throws RemoteException
  {
    items.Movie(s);
  }


  /** public void stateMessage(String s) is a public method to
    process messages about the oos "State".

    @param String m
    @return  none
    @throws RemoteException
 */
  public void stateMessage(String s) throws RemoteException
  {
    if(s.equals("Running"))
    {
      items.Run();
      seqPanel.getMyList().setEnabled(false);//disable user selection now
      if(breakPoint>0)
      if(breakPoint<seqPanel.getMyList().getSelectedIndex()-1)
      {
        if(seqPanel.getListData().elementAt
          (seqPanel.getMyList().getSelectedIndex()-1).toString().length()>17)
           if(seqPanel.getListData().elementAt
          (seqPanel.getMyList().getSelectedIndex()-1).toString().
            substring(0,17).equals("*****************"))
            cancelBreakPoint();
      }

    }
    else if(s.equals("Stopped"))
    {
      items.Stop();
      seqPanel.getMyList().setEnabled(true);
      if(breakPoint>0)
      if(breakPoint<seqPanel.getMyList().getSelectedIndex()-1)
        cancelBreakPoint();
    }
    else if(s.equals("Paused"))
    {
      items.Pause();
    }
    else if (s.equals("Idle"))
    {
      items.Idle();
    }

    uPanel.messageString(s);
  }

/** public void execlistMessage(String s) is a public method to
    process messages about the oos's exec sequence list.

    @param String m
    @return  none
    @throws RemoteException
 */
  public void execlistMessage(String s) throws RemoteException
  {
    if (s.length()>10) {
      if (s.substring(0,10).equals("Completed:")) {
 	if (System.getProperty("DBUG_MESS").equals("ON"))
 	  System.out.println("Data list:"+seqData);

	for (int i=0;i<seqData.size();i++) {
	  if (seqData.elementAt(i).toString().length()>=10) {
	    if (seqData.elementAt(i).toString().substring(0,10).
		equals("breakPoint")) {
	      seqData.setElementAt(new String
				   ("_ _ _ _ _ _ _ _ _ _ break point"),i);
	    } else if (seqData.elementAt(i).toString().substring(0,10).
		       equals("-breakPoin")) {
	      seqData.setElementAt(new String
				   ("-_ _ _ _ _ _ _ _ _ _ break point"),i);
	    }
	  }
	}
	seqPanel.setDataList(seqData);

	return;

      } else if(s.substring(0,10).equals("start_exec")) {

	seqData.removeAllElements();
	seqData.trimToSize();
	return;
      }
    }
    seqData.addElement(s);
  }

  /** public void instMessage(String s) is a public method to
    process messages about the instrument status.

    @param String m
    @return  none
    @throws RemoteException
 */
  public void instMessage(String s) throws RemoteException
  {

    //    System.out.println ("Got message "+s);
    if(s.length()>12)
    if(s.substring(0,12).equals("INST@expTime"))
    {
      _movie.setExposureTime(s.substring(14));
    }
    
    ((messageInterface)sFrame).messageString(s);

  }

  /** public void dhsMessage(String s) is a public method to
    process messages about the dhs status.

    @param String m
    @return none
    @throws RemoteException
 */
  public void dhsMessage(String s)  throws RemoteException
  {
    ((messageInterface)dPanel).messageString(s);
  }

  /** public void stateMessage(String s) is a public method to
    process messages about the index position of the seq panel.

    @param String m
    @return  none
    @throws RemoteException
 */
  public void indexMessage(String s) throws RemoteException
  {

    int index=0;
    try {
      index=Integer.parseInt(s)-1;
    } catch (NumberFormatException e) {
      System.out.println("Sequence index indecipherable!" + e.getMessage());
    }

    try {

      if (seqPanel.getListData().size()<seqPanel.getExecData().size()) {
	if (index >= seqPanel.getIndexMap().length) {
	  //	  index=seqPanel.getIndexMap().length-1;
	  index = 0;
	}
	index=seqPanel.getIndexMap()[index];
      }else {
	if (index >= seqPanel.getExecData().size()) {
	  index = 0;
	}
      }

    }catch (NullPointerException  e) {
      System.out.println ("Unexpected error: Sequence panel null!");
    }

    Point pos =seqPanel.getJScrollPane().getViewport().getViewPosition();

    if (index>2) pos.y =index*15-30;
    
    if (index>=0) seqPanel.getMyList().setSelectedIndex(index);

    seqPanel.getJScrollPane().getViewport().setViewPosition(pos);
    
    if (breakPoint>0) {
      if (breakPoint<seqPanel.getMyList().getSelectedIndex()-1) {
	if (seqPanel.getListData().elementAt 
	    (seqPanel.getMyList().getSelectedIndex()-1).
	    toString().length()>17) {
	  if(seqPanel.getListData().elementAt
	     (seqPanel.getMyList().getSelectedIndex()-1).toString().
	     substring(0,17).equals("*****************")) {
	    cancelBreakPoint();
	  }
	}
      }
    }

    seqPanel.validate();
  }

  /** public void breakPointMessage() is a public method to
    process messages about setting a break point

    @param none
    @return  none
    @throws RemoteException
 */
  public void breakPointMessage() throws RemoteException
  {
    int index=seqPanel.getMyList().getSelectedIndex();
    int i=seqPanel.getListData().size();

    if(index>=0)
    for(i=index; i<seqPanel.getListData().size();i++)
    if(seqPanel.getListData().elementAt(i).toString().length()>20)
    {
      if(seqPanel.getListData().elementAt(i).toString().substring(0,20).
        equals("_ _ _ _ _ _ _ _ _ _ "))
      {
        breakPoint=index;
        seqPanel.getListData().setElementAt(new String("***************** break point"),i);
        break;
      }  else if(seqPanel.getListData().elementAt(i).toString().
        substring(0,21).equals("-_ _ _ _ _ _ _ _ _ _ "))
      {
        breakPoint=index;
        seqPanel.getListData().setElementAt(new String("-***************** break point"),i);
        break;
      }
    }

    if(i<seqPanel.getListData().size())
      items.BreakPoint();
  }

  /**public void cancelBreakPoint() is a public method to
    process messages about canceling a break point

    @param none
    @return  none
    @throws RemoteException
 */
  public void cancelBreakPoint() throws RemoteException
  {
    int i;
    for(i=0; i<seqPanel.getListData().size();i++)
    if(seqPanel.getListData().elementAt(i).toString().length()>18)
    {
      if(seqPanel.getListData().elementAt(i).toString().
        substring(0,17).equals("*****************"))
      {
        breakPoint=0;
        seqPanel.getListData().setElementAt(new String("_ _ _ _ _ _ _ _ _ _ break point"),i);
        break;
      } else if(seqPanel.getListData().elementAt(i).toString().
          substring(0,18).equals("-*****************"))
      {
        breakPoint=0;
        seqPanel.getListData().setElementAt(new String("-_ _ _ _ _ _ _ _ _ _ break point"),i);
        break;
       }
     }
    //if(i<seqPanel.getListData().size())
      items.CancelBreak();
  }

 /**linkItemsShown (itemsShown i) is a public method to
    link the messageServer with a ItemShonw object

    @param itemsShown
    @return  none
    @throws RemoteException
 */
  public void linkItemsShown (itemsShown i) throws RemoteException {items=i;}

 /** public void linkCommandSent (sendCmds c) is a public method to
    link the messageServer with a sendCmds object

    @param sendCmds
    @return  none
    @throws RemoteException
 */
  public void linkCommandSent (sendCmds c)  throws RemoteException {cSent=c;}

 /**public void linkSequencePanel (sequencePanel seq) is a public method to
    link the messageServer with a sequencePanel object

    @param sequencePanel
    @return  none
    @throws RemoteException
 */
  public void linkSequencePanel (sequencePanel seq) throws RemoteException
  {
     seqPanel=seq;
  }

  /**public void linkUpperPanel (upperPanel u) is a public method to
    link the messageServer with a upperPanel object

    @param upperPanel
    @return  none
    @throws RemoteException
 */
  public void linkUpperPanel (upperPanel u) throws RemoteException {uPanel=u;}

  /**public void linkStatusFrame (UFTIStatus s) t is a public method to
    link the messageServer with a UFTIStatus object

    @param UFTIStatus
    @return  none
    @throws RemoteException
 */
  public void linkUFTIStatus (UFTIStatus s) throws RemoteException
  {
    sFrame=s;
  }

  public void linkCGS4Status (CGS4Status s) throws RemoteException
    {
      sFrame=s;
    }

  public void linkIRCAM3Status (IRCAM3Status s) throws RemoteException
    {
      sFrame=s;
    }

  /** public void linkTargetPanel(targetPanel t) is a public method to
    link the messageServer with a targetPanel object

    @param targetPanel
    @return none
    @throws RemoteException
 */
  public void linkTargetPanel(targetPanel t) throws RemoteException {tPanel=t;}

  /** public void linkDhsPanel(dhsPanel d) is a public method to
    link the messageServer with a dhsPanel object

    @param dhsPanel
    @return  none
    @throws RemoteException
 */
  public void linkDhsPanel(dhsPanel d)  throws RemoteException {dPanel=d;}

  /** public void linkMovieFrame(movie m) is a public method to
    link the messageServer with a movie object

    @param movie
    @return  none
    @throws none
 */
  public void linkMovieFrame(movie m) {_movie=m;}

  /**public void setSeqData(Vector s) is a public method to
    set up sequence data

    @param Vector
    @return  none
    @throws RemoteException
 */
  public void setSeqData(Vector s) throws RemoteException
  {
    seqPanel.setDataList(s);
  }

  /**public Vector getSeqData() is a public method to
    get sequence data

    @param none
    @return  Vector
    @throws RemoteException
 */
  public Vector getSeqData() throws RemoteException  {return seqData;}

  private int breakPoint=0;
  private targetPanel tPanel;
  private dhsPanel dPanel;
  private instrumentStatusPanel sFrame;
  private upperPanel uPanel;
  private sequencePanel seqPanel;
  private itemsShown items;
  private movie _movie;
  private sendCmds cSent;
  private String fileName, instName;
  private Vector seqData=new Vector();
  private FrameList consoleList;
  private int mLink=3;  //no of drama tasks to be linked with the drama monitor task e.g.3
}
