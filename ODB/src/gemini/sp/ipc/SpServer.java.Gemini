// Copyright 1997 Association for Universities for Research in Astronomy, Inc.,
// Observatory Control System, Gemini Telescopes Project.
// See the file COPYRIGHT for complete details.
//
// $Id$
//
package gemini.sp.ipc;

import gemini.corba.namesutil.NamesUtil;

import gemini.sp.IdlToSp;
import gemini.sp.SpAvTable;
import gemini.sp.SpItem;
import gemini.sp.SpToIdl;

import org.omg.CORBA.ORB;

import ScienceProgram.AvPair;
import ScienceProgram.Item;
import ScienceProgram.Server;
import ScienceProgram.ServerHelper;

import ScienceProgram.ServerPackage.Access;
import ScienceProgram.ServerPackage.AccessException;
import ScienceProgram.ServerPackage.OdbException;
import ScienceProgram.ServerPackage.Database;
import ScienceProgram.ServerPackage.ItemPosition;
import ScienceProgram.ServerPackage.ProgKey;
import ScienceProgram.ServerPackage.ProgKeyHolder;

/**
 * Wrapper for the ScienceProgram.Server interface.  This class presents
 * an easier to use, more convenient interface to java clients.
 */
public final class SpServer
{
   // Development or deployed ODB server?
   public static final int DEVELOPMENT = 0;
   public static final int DEPLOYED    = 1;

   public static final int CHILD   = ItemPosition._CHILD;
   public static final int SIBLING = ItemPosition._SIBLING;

   private static Server   _spServer = null;
   private static ORB      _orb      = null;
   private static boolean  _useDeployedServer = true;

   private        String   _problem  = null;

/**
 * Select either the development (SpServer.DEVELOPMENT) or deployed 
 * (SpServer.DEPLOYED) server.
 */
public static void
selectServer(int server)
{
   if (server == DEVELOPMENT) {
      if (_useDeployedServer) {
         // Null the _spServer so that the next operation will reconnect.
         _spServer = null;
      }
      _useDeployedServer = false;
   } else {
      if (!_useDeployedServer) {
         // Null the _spServer so that the next operation will reconnect.
         _spServer = null;
      }
      _useDeployedServer = true;
   }
}

/**
 * If a method fails, clients can use getProblemDescr to see what went wrong.
 */
public String
getProblemDescr()
{
   return _problem;
}

/**
 * Convert the SpAccess structure into a valid IDL Access structure.
 */
private Access
_convertAccess(SpAccess spAccess)
{
   Database db;
   try {
      db = Database.from_int(spAccess.db);
   } catch (Exception ex) {
      _problem = "Specify either PHASEII or ACTIVE database";
      return null;
   }

   return new Access(spAccess.password, db, spAccess.onlineCapability);
}

/**
 * Convert the SpProgKey structure into a valid IDL ProgKey structure.
 */
private ProgKey
_convertProgKey(SpProgKey spProgKey)
{
   return new ProgKey(spProgKey.id, spProgKey.key);
}


/**
 * Obtain a listing of the programs for the given user.
 */
public boolean
list(SpAccess spAccess, String user, java.util.Vector progVector)
{
   boolean result = false;
   if (!_getServer()) {
      return false;
   }

   Access ac = _convertAccess(spAccess);
   if (ac == null) {
      return false;
   }

   String[] stringSeq;
   try {
      stringSeq = _spServer.list(ac, user);
      result    = true; 

      for (int i=0; i<stringSeq.length; ++i) {
         progVector.addElement(stringSeq[i]);
      }

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Exception: " + e.toString();
   }

   ac = null;
   return result;
}

/**
 * Fetch a program from the ODB.
 */
public SpItem
fetch(SpAccess spAccess, SpProgKey spProgKey)
{
   if (!_getServer()) {
      return null;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return null;
   }
   ProgKey pk = _convertProgKey(spProgKey);
   
   SpItem spItem = null;
   try {
      Item idlItem = _spServer.fetch(ac, pk);
      spItem       = IdlToSp.convert(idlItem);

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Error: " + e;
   }

   //if (spItem != null) {
   //   spItem.getEditFSM().reset();
   //}

   ac = null; pk = null;
   return spItem;
}

/**
 * Store a program to the ODB.
 */
public SpItem
store(SpAccess spAccess, SpProgKey spProgKey, SpItem spItem)
{
   SpItem newSpItem = null;

   if (!_getServer()) {
      return null;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return null;
   }
   ProgKey pk = _convertProgKey(spProgKey);

   Item idlProg = SpToIdl.convert(spItem);

   try {
      Item newIdlItem = _spServer.store(ac, pk, idlProg);
      newSpItem       = IdlToSp.convert(newIdlItem);

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "Corba Error: " + e;
   }
 
   ac = null; pk = null;  // just freeing the memory quicker
   return newSpItem;
}


/**
 * Store a new program to the ODB.
 *
 * The newKey structure is filled in if the storeNew is successful (i.e.,
 * this is an "out" parameter and must be allocated before the call but is
 * initialized by this method).
 */
public SpItem
storeNew(SpAccess spAccess, SpItem spItem, String user, SpProgKey newKey)
{
   SpItem newSpItem = null;

   if (!_getServer()) {
      return null;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return null;
   }

   Item idlProg = SpToIdl.convert(spItem);

   ProgKeyHolder pkHolder;
   pkHolder = new ProgKeyHolder();

   try {
      Item newIdlItem;
      newIdlItem = _spServer.storeNew(ac, idlProg, user, pkHolder);
      newSpItem  = IdlToSp.convert(newIdlItem);

      //newSpItem.name(pkHolder.value.id);

      newKey.id  = pkHolder.value.id;
      newKey.key = pkHolder.value.key;
 
   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Error: " + e;
   }
 
   ac = null; pkHolder = null;
   return newSpItem;
}


/**
 * Replace the attribute/value table of an item.
 */
public boolean
replaceAV(SpAccess spAccess, SpProgKey spProgKey,
          String   itemId,   SpAvTable avTab)
{
   if (!_getServer()) {
      return false;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return false;
   }
   ProgKey pk = _convertProgKey(spProgKey);

   boolean result = false;

   AvPair[] idlAV = SpToIdl.convertAV(avTab);

   try {
      _spServer.replaceAV(ac, pk, itemId, idlAV);
      result = true;

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Error: " + e;
   }

   ac = null; pk = null;
   return result;
}


/**
 * Add a new item to the program at the indicated position.
 */
public SpItem
add(SpAccess spAccess, SpProgKey spProgKey,
    SpItem spNewChild, String refItemId, int posn)
{
   if (!_getServer()) {
      return null;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return null;
   }
   ProgKey pk = _convertProgKey(spProgKey);

   SpItem newSpItem = null;
   Item idlChild = SpToIdl.convert(spNewChild);
   try {
      ItemPosition spPosn = ItemPosition.CHILD;
      if (posn == SIBLING) {
         spPosn = ItemPosition.SIBLING;
      }

      Item newIdlItem;
      newIdlItem = _spServer.add(ac, pk, idlChild, refItemId, spPosn);
      newSpItem  = IdlToSp.convert(newIdlItem);

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Error: " + e;
   }

   ac = null; pk = null;
   return newSpItem;
}


/**
 * Move an item from one position to another.
 */
public boolean
move(SpAccess spAccess, SpProgKey spProgKey,
     String srcItemId, String destItemId, int posn)
{
   if (!_getServer()) {
      return false;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return false;
   }
   ProgKey pk = _convertProgKey(spProgKey);

   boolean result = false;
   try {
      ItemPosition ip = ItemPosition.from_int(posn);
      _spServer.move(ac, pk, srcItemId, destItemId, ip);
      result = true;

   } catch (org.omg.CORBA.BAD_PARAM e) {
      _problem = "The position should be either CHILD or SIBLING not: " + posn;

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "CORBA Error: " + e;
   }

   ac = null; pk = null;
   return result;
}


/**
 * Remove an item.
 */
public boolean
remove(SpAccess spAccess, SpProgKey spProgKey, String itemId)
{
   if (!_getServer()) {
      return false;
   }

   Access ac  = _convertAccess(spAccess);
   if (ac == null) {
      return false;
   }
   ProgKey pk = _convertProgKey(spProgKey);
   
   boolean result = false;
   try {
      _spServer.remove(ac, pk, itemId);
      result = true;

   } catch (AccessException e) {
      _problem = "Access Error: " + e.info;

   } catch (OdbException e) {
      _problem = "ODB Error: " + e.info;

   } catch (Exception e) {
      _problem = "ODB Error: " + e;
   }

   ac = null; pk = null;
   return result;
}

/**
 * Get a reference to the ORB on the remote server.
 */
private boolean
_getOrb()
{
   boolean result = false;
   if (_orb != null) {
      return true;
   }

   System.out.println("creating orb ...");
//   try {
      //String[] t = {
      //   "-ORBHost", "friar.tuc.noao.edu",
      //   "-ORBInitialServices", "http://friar.tuc.noao.edu/joe.config"
      //};
      _orb = ORB.init(new String[] {}, null);
      result = true;
//   } catch (CORBAException e) {
//      _problem = "Could not contact okra.tuc.noao.edu: " + e;
//   }

   return result;
}

/**
 * Get a reference to the Observing Database server.
 */
private boolean
_getServer()
{
   boolean result = false;
   if (_spServer != null) {
      return true;
   }

   synchronized (getClass()) {
      // Check again for the _spServer, another thread may have initialized
      // it.
      if (_spServer != null) {
         return true;
      }

      if (!_getOrb()) {
         return false;
      }

 
      String action = "";
      try {
         NamesUtil nu = NamesUtil.instance();
         action = "initializing the name server ...";
         nu.init(_orb, null);

         org.omg.CORBA.Object obj;

         //if (_useDeployedServer) {
            // Look up the deployed server.
            //System.out.println("Looking up the DEPLOYED ODB server...");
            action = "finding the Science Program Server";
            //obj    = _orb.find("OdbServer", Joe.MERGE, false);
            obj = nu.resolveToObject("/services/OdbServer");
         //} else {
         //   // Look up the development server.
         //   System.out.println("Looking up the DEVELOPMENT ODB server...");
         //   action = "finding the DEVELOPMENT Science Program Server";
         //   obj    = _orb.find("OdbServer", Joe.MERGE, true);
         //}
         action        = "narrowing CORBA Object to SpServer";
         _spServer     = ServerHelper.narrow(obj);

         System.out.println("Found server.");
         result = true;

      } catch (Exception e) {
         _problem = "Problem " + action + ": " + e;
      }
   }

   return result;
}

}

